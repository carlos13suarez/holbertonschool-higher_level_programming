>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix = [[10, 20, 30], [40, 50, 60]]
>>> matrix_divided(matrix, 10)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 2.5)
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test for matrix containing non-integer/float values
>>> matrix = [[1, 2, "3"], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test for rows of different sizes
>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test for non-list matrix
>>> matrix_divided(123, 3)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test for invalid divisor type
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, "3")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test for division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

>>> matrix = [[1, 2, 3], [4, 5, 6]]
matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

# Test for one missing argument
>>> matrix_divided(matrix)  # Missing div argument
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test for two missing arguments
>>> matrix_divided()  # Missing both matrix and div arguments
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
